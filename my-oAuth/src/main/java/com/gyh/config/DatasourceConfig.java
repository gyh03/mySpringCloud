package com.gyh.config;import com.alibaba.druid.pool.DruidDataSource;import org.mybatis.spring.annotation.MapperScan;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.core.env.Environment;import javax.sql.DataSource;@Configuration@MapperScan(basePackages = "com.jzy.*.dao", sqlSessionFactoryRef = "sqlSessionFactory")public class DatasourceConfig {    @Autowired    private Environment env;//    @Primary//    @Bean(name = "redisConnectionFactory")//    public RedisConnectionFactory redisConnectionFactory(){//        JedisConnectionFactory redisConnectionFactory=new JedisConnectionFactory();//        redisConnectionFactory.setHostName(env.getProperty("spring.oauth.redis.host"));//        redisConnectionFactory.setPort(Integer.parseInt(env.getProperty("spring.oauth.redis.port")));//        redisConnectionFactory.setDatabase(Integer.parseInt(env.getProperty("spring.oauth.redis.database")));//        JedisPoolConfig jedisPoolConfig=new JedisPoolConfig();//        jedisPoolConfig.setMaxTotal(Integer.parseInt(env.getProperty("spring.oauth.redis.pool.max_total")));//        jedisPoolConfig.setMaxIdle(Integer.parseInt(env.getProperty("spring.oauth.redis.pool.max_idle")));//        jedisPoolConfig.setMinIdle(Integer.parseInt(env.getProperty("spring.oauth.redis.pool.min_idle")));//        jedisPoolConfig.setMaxWaitMillis(Integer.parseInt(env.getProperty("spring.oauth.redis.pool.maxWaitMillis")));//        redisConnectionFactory.setPoolConfig(jedisPoolConfig);//        return  redisConnectionFactory;////    }    @Primary    @Bean(name = "dataSource")    @ConfigurationProperties(prefix = "spring.datasource.druid")    public DataSource dataSource() {        DruidDataSource datasource = new DruidDataSource();        return datasource;    }}